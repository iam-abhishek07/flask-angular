
import { analytics, json, logging } from '@angular-devkit/core';

export declare type Value = number | string | boolean | (number | string | boolean)[];

export interface Arguments {
    [argName: string]: Value | undefined;
   
    '--'?: string[];
}

export interface CommandInterface<T extends Arguments = Arguments> {
    printHelp(options: T): Promise<number>;
    printJsonHelp(options: T): Promise<number>;
    validateAndRun(options: T): Promise<number>;
}

export interface CommandConstructor {
    new (context: CommandContext, description: CommandDescription, logger: logging.Logger): CommandInterface;
}

export interface CommandWorkspace {
    root: string;
    configFile?: string;
}

export interface CommandContext {
    workspace: CommandWorkspace;
    analytics?: analytics.Analytics;
}

export declare enum OptionType {
    Any = "any",
    Array = "array",
    Boolean = "boolean",
    Number = "number",
    String = "string"
}

export interface Option {
    
    name: string;
    
    description: string;
    
    type: OptionType;
   
    types?: OptionType[];
    
    enum?: Value[];
   
    subcommands?: {
        [name: string]: SubCommandDescription;
    };
   
    aliases: string[];
    
    required?: boolean;
   
    format?: string;
   
    hidden?: boolean;
    
    default?: string | number | boolean;

    positional?: number;
    
    $default?: OptionSmartDefault;
   
    userAnalytics?: number;
}

export declare enum CommandScope {
    InProject = "in",
    OutProject = "out",
    Everywhere = "all",
    Default = "in"
}

export interface SubCommandDescription {
    
    name: string;
    
    description: string;
    
    longDescription?: string;
    
    usageNotes?: string;
   
    options: Option[];
    
    aliases: string[];
}

export interface CommandDescription extends SubCommandDescription {
    
    scope: CommandScope;
   
    hidden: boolean;
   
    impl: CommandConstructor;
}
export interface OptionSmartDefault {
    $source: string;
    [key: string]: json.JsonValue;
}
export interface CommandDescriptionMap {
    [key: string]: CommandDescription;
}
